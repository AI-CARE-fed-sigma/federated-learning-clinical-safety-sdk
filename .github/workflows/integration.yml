name: SDK ↔ Server Integration

on: [push, pull_request]

jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout SDK
        uses: actions/checkout@v4

      - name: Checkout Server
        uses: actions/checkout@v4
        with:
          repository: AlexDobsonPleming/federated-learning-clinical-safety-server
          path: server

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Build server image without cache
        working-directory: server
        run: docker compose -f docker-compose.test.yml build --no-cache

      - name: Bring up server (fresh build)
        working-directory: server
        run: docker compose -f docker-compose.test.yml up --force-recreate -d

      - name: Dump entrypoint script & full logs
        working-directory: server
        run: |
          CID=$(docker ps -aq -f "name=^api_test$")
          echo "🔍 /app/docker-entrypoint.sh contents:"
          docker exec $CID cat /app/docker-entrypoint.sh || true
          echo
          echo "🔍 Full timestamped logs:"
          docker logs --timestamps $CID || true

      - name: Wait for API to bind port 8000
        working-directory: server
        run: |
          for i in $(seq 1 20); do
            if ss -ltn | grep -q ':8000'; then
              echo "✅ port 8000 is listening"
              exit 0
            fi
            echo "⏳ waiting for port 8000..."
            sleep 2
          done
          echo "❌ port 8000 never bound"
          docker compose -f docker-compose.test.yml logs api
          exit 1

      - name: Verify "api_test" container is up
        working-directory: server
        run: |
          # Look for any container (running or stopped) named exactly "api_test"
          CID=$(docker ps -aq -f "name=^api_test$")
          if [ -z "$CID" ]; then
            echo "❌ Could not find a container named api_test"
            docker ps -a
            exit 1
          fi

          # Check that it's running
          if ! docker inspect --format='{{.State.Running}}' $CID | grep -q true; then
            echo "❌ api_test container is not running (it may have exited)"
            echo "→ State: $(docker inspect --format='{{.State.Status}}' $CID)'"
            echo "----- logs -----"
            docker logs $CID || true
            exit 1
          fi

          echo "✅ api_test container ($CID) is running"

      - name: Debug token creation in container logs
        working-directory: server
        run: |
          CID=$(docker ps -aq -f "name=^api_test$")
          echo "🔍 Container logs for api_test ($CID):"
          docker logs $CID || true
          echo
          echo "🔍 Looking for the write confirmation:"
          if docker logs $CID 2>&1 | grep -q 'Wrote token to'; then
            echo "✅ Found the write confirmation in the logs."
          else
            echo "❌ No 'Wrote token to' message — the management command may not be running or has no file‐write."
          fi

      - name: Extract SDK_TEST_TOKEN from file
        working-directory: server
        run: |
          CID=$(docker ps -aq -f "name=^api_test$")
          echo "📦 Using container $CID"

          # List /tmp so we can see exactly what's there
          echo "Contents of /tmp in api_test:"
          docker exec $CID ls -la /tmp || true

          # Copy the token
          docker cp $CID:/tmp/uploader_token.txt uploader_token.txt

          # Read and export
          TOKEN=$(cat uploader_token.txt)
          echo "✅ Got SDK_TEST_TOKEN=$TOKEN"
          echo "SDK_TEST_TOKEN=$TOKEN" >> $GITHUB_ENV


      - name: Setup Python & Poetry
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: pip install poetry

      - name: Install SDK dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --no-ansi

      - name: Run integration tests
        env:
          API_BASE_URL: http://localhost:8000/api
          SDK_TEST_TOKEN: ${{ env.SDK_TEST_TOKEN }}
        run: poetry run pytest src/tests/test_integration.py

      - name: Tear down
        if: always()
        working-directory: server
        run: docker compose -f docker-compose.test.yml down --volumes --remove-orphans
