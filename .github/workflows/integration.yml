name: SDK ↔ Server Integration

on: [push, pull_request]

jobs:
  integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout SDK
        uses: actions/checkout@v4

      - name: Checkout Server
        uses: actions/checkout@v4
        with:
          repository: AlexDobsonPleming/federated-learning-clinical-safety-server
          path: server

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Build server image without cache
        working-directory: server
        run: docker compose -f docker-compose.test.yml build --no-cache

      - name: Bring up server (fresh build)
        working-directory: server
        run: docker compose -f docker-compose.test.yml up --force-recreate -d

      - name: Wait for API to bind port 8000
        working-directory: server
        run: |
          for i in $(seq 1 20); do
            if ss -ltn | grep -q ':8000'; then
              echo "✅ port 8000 is listening"
              exit 0
            fi
            echo "⏳ waiting for port 8000..."
            sleep 2
          done
          echo "❌ port 8000 never bound"
          docker compose -f docker-compose.test.yml logs api
          exit 1

      - name: Verify "api" container is Up
        working-directory: server
        run: |
          if ! docker compose -f docker-compose.test.yml ps api | grep -qw Up; then
            echo "❌ api container failed to stay Up"
            docker compose -f docker-compose.test.yml logs api
            exit 1
          fi
          echo "✅ api container is Up"


      - name: Extract SDK_TEST_TOKEN from file
        working-directory: server
        run: |
          # copy the token file out by container name
          docker cp api_test:/tmp/uploader_token.txt uploader_token.txt
      
          TOKEN=$(cat uploader_token.txt)
          echo "✅ Got SDK_TEST_TOKEN=$TOKEN"
          echo "SDK_TEST_TOKEN=$TOKEN" >> $GITHUB_ENV


      - name: Setup Python & Poetry
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: pip install poetry

      - name: Install SDK dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --no-ansi

      - name: Run integration tests
        env:
          API_BASE_URL: http://localhost:8000/api
          SDK_TEST_TOKEN: ${{ env.SDK_TEST_TOKEN }}
        run: poetry run pytest src/tests/test_integration.py

      - name: Tear down
        if: always()
        working-directory: server
        run: docker compose -f docker-compose.test.yml down --volumes --remove-orphans
